<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Comment</title>
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
    <script src="https://unpkg.com/feather-icons"></script>
  </head>
  <body class="bg-[#0f1533] text-white font-sans">
    <div class="flex mx-auto min-h-screen">
      <!-- Sidebar -->
      <%- include('components/sidebar') %>
      <main class="flex-1 border-x p-2 rounded border-gray-700">
        <!-- Header -->
        <div class="flex items-center border-b border-gray-700 px-4 py-3">
          <a href="/" class="mr-4 text-gray-400 hover:text-white">
            <i data-feather="arrow-left" class="w-5 h-5"></i>
          </a>
          <span class="text-lg font-semibold">Post</span>
        </div>

        <!-- Main Post -->
        <div class="p-4">
          <div data-post-id="<%= post.id %>">
            <%- include('components/post', {
              id: post.id,
              name: post.name,
              username: post.username,
              content: post.content,
              media: Array.isArray(post.media) ? post.media : (post.media ? [post.media] : []),
              primaryMedia: post.primaryMedia || (Array.isArray(post.media) && post.media.length ? post.media[0] : null),
              comments: post.comments,
              likes: post.likes,
              category: post.category || null
            }) %>
          </div>
        </div>

        <!-- New Comment Box -->
        <div class="flex items-center px-4 py-3 border-b border-gray-700">
          <div class="w-10 h-10 bg-gray-500 rounded-full mr-3"></div>
          <input
            type="text"
            id="comment-input"
            class="flex-1 bg-transparent border-none outline-none text-white placeholder-gray-400"
            placeholder="Post your reply"
            onkeypress="handleCommentKeyPress(event)"
          />
          <button
            id="comment-submit-btn"
            class="ml-3 px-4 py-1 rounded-full bg-purple-600 hover:bg-purple-700 text-white font-semibold transition-colors"
            onclick="submitComment()"
          >
            Post
          </button>
        </div>

        <!-- Comments Feed -->
        <div class="p-4 space-y-4">
          <% if (comments && comments.length) { %>
            <% comments.forEach(comment => { %>
              <div data-post-id="<%= comment.id %>">
                <%- include('components/post', {
                  id: comment.id,
                  name: comment.name,
                  username: comment.username,
                  content: comment.content,
                  media: Array.isArray(comment.media) ? comment.media : (comment.media ? [comment.media] : []),
                  primaryMedia: comment.primaryMedia || (Array.isArray(comment.media) && comment.media.length ? comment.media[0] : null),
                  comments: comment.comments,
                  likes: comment.likes,
                  category: comment.category || null
                }) %>
              </div>
            <% }) %>
          <% } else { %>
            <p class="text-center text-gray-400 py-6">No comments yet.</p>
          <% } %>
        </div>
      </main>
    </div>
    <script>
      feather.replace();
      
      // Get the post ID from the URL or from the post element
      const urlParams = new URLSearchParams(window.location.search);
      const postId = urlParams.get('id') || document.querySelector('[data-post-id]')?.getAttribute('data-post-id');
      
      /**
       * Handle key press in comment input
       * @param {Event} event - The keyboard event
       */
      function handleCommentKeyPress(event) {
        if (event.key === 'Enter' && !event.shiftKey) {
          event.preventDefault();
          submitComment();
        }
      }
      
      /**
       * Submit a new comment
       */
      function submitComment() {
        const commentInput = document.getElementById('comment-input');
        const submitButton = document.getElementById('comment-submit-btn');
        const content = commentInput.value.trim();
        
        if (!content) {
          showNotification('Please enter a comment', 'error');
          return;
        }
        
        if (!postId) {
          showNotification('Unable to determine post ID', 'error');
          return;
        }
        
        // Show loading state
        const originalText = submitButton.textContent;
        submitButton.disabled = true;
        submitButton.textContent = 'Posting...';
        commentInput.disabled = true;
        
        // Send comment request
        fetch('/api/comments', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            post_id: postId,
            content: content
          })
        })
        .then(response => {
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          if (data.success) {
            // Clear the input
            commentInput.value = '';
            
            // Add the new comment to the comments feed
            addCommentToFeed(data.comment);
            
            // Show success notification
            showNotification('Comment posted successfully', 'success');
          } else {
            throw new Error(data.error || 'Failed to post comment');
          }
        })
        .catch(error => {
          console.error('Error posting comment:', error);
          showNotification(`Failed to post comment: ${error.message}`, 'error');
        })
        .finally(() => {
          // Restore button state
          submitButton.disabled = false;
          submitButton.textContent = originalText;
          commentInput.disabled = false;
          commentInput.focus();
        });
      }
      
      /**
       * Add a new comment to the comments feed
       * @param {Object} comment - The comment object to add
       */
      function addCommentToFeed(comment) {
        const commentsFeed = document.querySelector('.space-y-4');
        const noCommentsMessage = commentsFeed.querySelector('.text-gray-400');
        
        // Remove "No comments yet" message if it exists
        if (noCommentsMessage) {
          noCommentsMessage.remove();
        }
        
        // Create comment element
        const commentElement = document.createElement('div');
        commentElement.setAttribute('data-post-id', comment.id);
        commentElement.className = 'opacity-0 transition-opacity duration-300';
        
        // Set the inner HTML using the same post component template
        commentElement.innerHTML = `
          <div class="bg-[#182244] rounded-xl p-4 mb-4 text-white shadow-lg">
            <!-- Post Header -->
            <header class="flex items-center justify-between mb-3">
              <div class="flex items-center space-x-3">
                <div class="w-10 h-10 bg-gray-500 rounded-full flex-shrink-0"></div>
                <div>
                  <h3 class="font-bold text-white">
                    <a href="/profile/${comment.username}" class="hover:text-purple-400 transition-colors">${comment.name}</a>
                  </h3>
                  <p class="text-gray-400 text-sm">
                    <a href="/profile/${comment.username}" class="hover:text-purple-400 transition-colors">@${comment.username}</a>
                  </p>
                </div>
              </div>
            </header>
            
            <!-- Post Content -->
            <main class="text-sm leading-relaxed text-gray-200">
              <p class="whitespace-pre-line mb-3">${comment.content}</p>
            </main>
            
            <!-- Post Actions -->
            <footer class="flex justify-start mt-4 text-gray-400 text-sm gap-8">
              <button
                class="flex items-center space-x-2 cursor-pointer hover:text-white transition-colors group"
                aria-label="View comments"
              >
                <i data-feather="message-circle" class="w-4 h-4 group-hover:scale-110 transition-transform"></i>
                <span>${comment.comments || 0}</span>
              </button>
              
              <button
                class="flex items-center space-x-2 cursor-pointer hover:text-white transition-colors group"
                aria-label="Like post"
              >
                <i data-feather="heart" class="w-4 h-4 group-hover:scale-110 transition-transform"></i>
                <span>${comment.likes || 0}</span>
              </button>
            </footer>
          </div>
        `;
        
        // Add to the top of the comments feed
        commentsFeed.insertBefore(commentElement, commentsFeed.firstChild);
        
        // Re-initialize feather icons for the new comment
        if (window.feather && typeof window.feather.replace === 'function') {
          window.feather.replace();
        }
        
        // Fade in the new comment
        setTimeout(() => {
          commentElement.classList.remove('opacity-0');
          commentElement.classList.add('opacity-100');
        }, 10);
      }
      
      /**
       * Show notification message
       * @param {string} message - The message to display
       * @param {string} type - The type of notification (success, error, info)
       */
      function showNotification(message, type = 'info') {
        // Create notification element
        const notification = document.createElement('div');
        notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full`;
        
        // Set color based on type
        const colors = {
          success: 'bg-green-600 text-white',
          error: 'bg-red-600 text-white',
          info: 'bg-blue-600 text-white'
        };
        
        notification.className += ` ${colors[type] || colors.info}`;
        notification.textContent = message;
        
        // Add to DOM
        document.body.appendChild(notification);
        
        // Animate in
        setTimeout(() => {
          notification.classList.remove('translate-x-full');
          notification.classList.add('translate-x-0');
        }, 10);
        
        // Remove after 3 seconds
        setTimeout(() => {
          notification.classList.add('translate-x-full');
          setTimeout(() => {
            if (notification.parentNode) {
              notification.parentNode.removeChild(notification);
            }
          }, 300);
        }, 3000);
      }
    </script>
  </body>
</html>
