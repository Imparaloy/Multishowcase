<%
// User permissions and context
const userContext = typeof currentUser !== 'undefined' ? currentUser : null;
const isOwner = userContext && typeof username !== 'undefined' && userContext.username === username;
const isAdmin = userContext && Array.isArray(userContext.groups) && userContext.groups.includes('admin');
const canDeleteFromProps = typeof canDelete !== 'undefined' ? canDelete : null;
const canDeletePost = canDeleteFromProps !== null ? canDeleteFromProps : (isOwner || isAdmin);

// Get the post ID from the parent element's data attribute
const postIdFromElement = typeof id !== 'undefined' ? id : null;

// Content processing
const textContent = typeof content === 'string' ? content.trim() : (typeof body === 'string' ? body.trim() : '');
const rawMediaList = Array.isArray(media) ? media.filter(Boolean) : [];
const heroMedia = (typeof primaryMedia !== 'undefined' && primaryMedia) ? primaryMedia : (rawMediaList.length ? rawMediaList[0] : null);
const heroIndex = heroMedia ? rawMediaList.indexOf(heroMedia) : -1;
const galleryMedia = heroMedia ? (heroIndex > -1 ? rawMediaList.filter((_, idx) => idx !== heroIndex) : rawMediaList) : rawMediaList;

// URL generation for actions
const commentUrl = typeof id !== 'undefined' ? `/comment?id=${id}` : '/comment';
%>

<div class="bg-[#182244] rounded-xl p-4 mb-4 text-white shadow-lg">
  <!-- Post Header -->
  <header class="flex items-center justify-between mb-3">
    <div class="flex items-center space-x-3">
      <div class="w-10 h-10 bg-gray-500 rounded-full flex-shrink-0"></div>
      <div>
        <h3 class="font-bold text-white"><%= name %></h3>
        <p class="text-gray-400 text-sm">@<%= username %></p>
      </div>
    </div>
    
    <div class="relative dropdown">
      <button
        type="button"
        class="flex items-center justify-center w-8 h-8 text-gray-400 cursor-pointer hover:text-white transition-colors rounded-full focus:outline-none focus-visible:ring-2 focus-visible:ring-purple-400"
        role="button"
        aria-label="Post actions"
        onclick="togglePostDropdown(this)"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="12" cy="12" r="1"></circle>
          <circle cx="12" cy="5" r="1"></circle>
          <circle cx="12" cy="19" r="1"></circle>
        </svg>
      </button>
      <div class="absolute right-0 mt-2 w-44 bg-[#1f2a50] border border-gray-700 rounded-lg shadow-lg py-2 z-10 hidden">
        <% if (typeof id !== 'undefined') { %>
          <button
            type="button"
            class="w-full px-4 py-2 text-left text-sm text-yellow-400 hover:bg-[#252f58] hover:text-yellow-300 transition-colors"
            onclick="showReportDialog('<%= id %>', 'post')"
          >
            Report Post
          </button>
        <% } %>
        <% if (canDeletePost && typeof id !== 'undefined') { %>
          <div class="border-t border-gray-700 my-1"></div>
          <button
            type="button"
            class="w-full px-4 py-2 text-left text-sm text-red-400 hover:bg-[#252f58] hover:text-red-300 transition-colors"
            onclick="deletePost('<%= id %>')"
          >
            Delete Post
          </button>
          <% } %>
        </div>
      </div>
  </header>

  <!-- Post Content -->
  <main class="text-sm leading-relaxed text-gray-200">
    <% if (textContent) { %>
      <p class="whitespace-pre-line mb-3"><%= textContent %></p>
    <% } %>

    <% if (heroMedia) { %>
      <div class="mt-3 overflow-hidden rounded-xl border border-gray-700/60 bg-[#111833] shadow-md">
        <a href="<%= heroMedia %>" target="_blank" rel="noopener" class="block">
          <img src="<%= heroMedia %>" alt="Post media" class="w-full h-full object-cover hover:scale-105 transition-transform duration-300" loading="lazy" />
        </a>
      </div>
    <% } %>

    <% if (galleryMedia.length) { %>
      <div class="mt-3 grid gap-3 sm:grid-cols-2">
        <% galleryMedia.forEach(function(url) { %>
          <a href="<%= url %>" target="_blank" rel="noopener" class="block overflow-hidden rounded-xl border border-gray-700/60 bg-[#111833] shadow-md hover:shadow-lg transition-shadow">
            <img src="<%= url %>" alt="Post media" class="w-full h-full object-cover hover:scale-105 transition-transform duration-300" loading="lazy" />
          </a>
        <% }); %>
      </div>
    <% } %>

    <% if (!textContent && !heroMedia && !galleryMedia.length && typeof content !== 'undefined' && content) { %>
      <p class="text-gray-200"><%= content %></p>
    <% } %>
  </main>

  <!-- Post Actions -->
  <footer class="flex justify-start mt-4 text-gray-400 text-sm gap-8">
    <button
      class="flex items-center space-x-2 cursor-pointer hover:text-white transition-colors group"
      onclick="window.location.href='<%= commentUrl %>'"
      aria-label="View comments"
    >
      <i data-feather="message-circle" class="w-4 h-4 group-hover:scale-110 transition-transform"></i>
      <span><%= comments || 0 %></span>
    </button>
    
    <button
      class="flex items-center space-x-2 cursor-pointer hover:text-white transition-colors group"
      onclick="window.location.href='<%= commentUrl %>'"
      aria-label="Like post"
    >
      <i data-feather="heart" class="w-4 h-4 group-hover:scale-110 transition-transform"></i>
      <span><%= likes || 0 %></span>
    </button>
  </footer>
</div>

<script>
/**
 * Post component functionality
 */
(function() {
  'use strict';
  
  /**
   * Delete a post with confirmation
   * @param {string} postId - The ID of the post to delete
   */
  function deletePost(postId) {
    if (!postId) {
      console.error('Post ID is required for deletion');
      return;
    }
    
    // Show confirmation dialog
    if (confirm('Are you sure you want to delete this post?')) {
      // Show loading state
      const deleteButton = document.querySelector(`button[onclick="deletePost('${postId}')"]`);
      const originalText = deleteButton ? deleteButton.textContent : '';
      
      if (deleteButton) {
        deleteButton.disabled = true;
        deleteButton.textContent = 'Deleting...';
      }
      
      // Send delete request
      fetch(`/api/posts/${postId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        if (data.success) {
          // Remove post element with animation - use the postId from the element's data attribute
          const postElement = document.querySelector(`[data-post-id="${postId}"]`);
          
          if (postElement) {
            postElement.style.transition = 'all 0.3s ease-out';
            postElement.style.opacity = '0';
            postElement.style.transform = 'scale(0.95)';
            postElement.style.marginBottom = '0';
            postElement.style.padding = '0';
            
            setTimeout(() => {
              postElement.style.height = '0';
              postElement.style.overflow = 'hidden';
              
              setTimeout(() => {
                postElement.remove();
                showNotification('Post deleted successfully', 'success');
              }, 300);
            }, 100);
          } else {
            // Fallback: reload page if we can't find the element
            window.location.reload();
          }
        } else {
          throw new Error(data.error || 'Unknown error occurred');
        }
      })
      .catch(error => {
        console.error('Error deleting post:', error);
        showNotification(`Failed to delete post: ${error.message}`, 'error');
        
        // Restore button state
        if (deleteButton) {
          deleteButton.disabled = false;
          deleteButton.textContent = originalText;
        }
      });
    }
  }
  
  /**
   * Show notification message
   * @param {string} message - The message to display
   * @param {string} type - The type of notification (success, error, info)
   */
  function showNotification(message, type = 'info') {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full`;
    
    // Set color based on type
    const colors = {
      success: 'bg-green-600 text-white',
      error: 'bg-red-600 text-white',
      info: 'bg-blue-600 text-white'
    };
    
    notification.className += ` ${colors[type] || colors.info}`;
    notification.textContent = message;
    
    // Add to DOM
    document.body.appendChild(notification);
    
    // Animate in
    setTimeout(() => {
      notification.classList.remove('translate-x-full');
      notification.classList.add('translate-x-0');
    }, 10);
    
    // Remove after 3 seconds
    setTimeout(() => {
      notification.classList.add('translate-x-full');
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 300);
    }, 3000);
  }
  
  /**
   * Show report dialog for a post
   * @param {string} targetId - The ID of the post to report
   * @param {string} targetType - The type of content (post, comment, etc.)
   */
  function showReportDialog(targetId, targetType = 'post') {
    if (!targetId) {
      console.error('Target ID is required for reporting');
      return;
    }
    
    // Create modal overlay
    const modalOverlay = document.createElement('div');
    modalOverlay.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
    modalOverlay.setAttribute('id', 'report-modal');
    
    // Create modal content
    const modalContent = document.createElement('div');
    modalContent.className = 'bg-[#182244] rounded-xl p-6 max-w-md w-full mx-4 text-white';
    
    modalContent.innerHTML = `
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-semibold">Report ${targetType}</h3>
        <button type="button" class="text-gray-400 hover:text-white" onclick="closeReportDialog()">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>
      
      <form id="report-form" onsubmit="submitReport(event, '${targetId}', '${targetType}')">
        <div class="mb-4">
          <label for="report-reason" class="block text-sm font-medium mb-2">Reason for reporting</label>
          <select id="report-reason" name="reason" required class="w-full px-3 py-2 bg-[#1f2a50] border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-400">
            <option value="">Select a reason</option>
            <option value="spam">Spam</option>
            <option value="inappropriate">Inappropriate content</option>
            <option value="harassment">Harassment</option>
            <option value="violence">Violence or threats</option>
            <option value="copyright">Copyright violation</option>
            <option value="misinformation">Misinformation</option>
            <option value="other">Other</option>
          </select>
        </div>
        
        <div class="mb-4">
          <label for="report-description" class="block text-sm font-medium mb-2">Additional details (optional)</label>
          <textarea id="report-description" name="description" rows="3" class="w-full px-3 py-2 bg-[#1f2a50] border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-400" placeholder="Provide any additional information..."></textarea>
        </div>
        
        <div class="flex justify-end space-x-3">
          <button type="button" class="px-4 py-2 bg-gray-600 hover:bg-gray-700 rounded-lg transition-colors" onclick="closeReportDialog()">Cancel</button>
          <button type="submit" class="px-4 py-2 bg-yellow-600 hover:bg-yellow-700 rounded-lg transition-colors">Submit Report</button>
        </div>
      </form>
    `;
    
    // Add to DOM
    modalOverlay.appendChild(modalContent);
    document.body.appendChild(modalOverlay);
    
    // Close on overlay click
    modalOverlay.addEventListener('click', function(e) {
      if (e.target === modalOverlay) {
        closeReportDialog();
      }
    });
  }
  
  /**
   * Close the report dialog
   */
  function closeReportDialog() {
    const modal = document.getElementById('report-modal');
    if (modal) {
      modal.remove();
    }
  }
  
  /**
   * Submit a report
   * @param {Event} event - The form submission event
   * @param {string} targetId - The ID of the content being reported
   * @param {string} targetType - The type of content being reported
   */
  function submitReport(event, targetId, targetType) {
    event.preventDefault();
    
    const form = event.target;
    const formData = new FormData(form);
    
    const reportData = {
      targetId: targetId,
      targetType: targetType,
      reason: formData.get('reason'),
      description: formData.get('description') || ''
    };
    
    // Show loading state
    const submitButton = form.querySelector('button[type="submit"]');
    const originalText = submitButton.textContent;
    submitButton.disabled = true;
    submitButton.textContent = 'Submitting...';
    
    // Send report
    fetch('/api/reports', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(reportData)
    })
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        showNotification('Report submitted successfully. Thank you for helping keep our community safe.', 'success');
        closeReportDialog();
      } else {
        throw new Error(data.error || 'Failed to submit report');
      }
    })
    .catch(error => {
      console.error('Error submitting report:', error);
      showNotification(`Failed to submit report: ${error.message}`, 'error');
    })
    .finally(() => {
      // Restore button state
      submitButton.disabled = false;
      submitButton.textContent = originalText;
    });
  }
  
  /**
   * Toggle post dropdown menu
   * @param {HTMLElement} button - The button that was clicked
   */
  function togglePostDropdown(button) {
    const dropdown = button.nextElementSibling;
    const isHidden = dropdown.classList.contains('hidden');
    
    // Close all other dropdowns
    document.querySelectorAll('.dropdown > div:last-child').forEach(d => {
      if (d !== dropdown) {
        d.classList.add('hidden');
      }
    });
    
    // Toggle current dropdown
    if (isHidden) {
      dropdown.classList.remove('hidden');
    } else {
      dropdown.classList.add('hidden');
    }
  }
  
  /**
   * Close dropdowns when clicking outside
   */
  document.addEventListener('click', function(event) {
    if (!event.target.closest('.dropdown')) {
      document.querySelectorAll('.dropdown > div:last-child').forEach(d => {
        d.classList.add('hidden');
      });
    }
  });
  
  // Make functions available globally
  window.deletePost = deletePost;
  window.showReportDialog = showReportDialog;
  window.closeReportDialog = closeReportDialog;
  window.submitReport = submitReport;
  window.togglePostDropdown = togglePostDropdown;
  
  // Initialize Feather Icons for this component
  if (window.feather && typeof window.feather.replace === 'function') {
    window.feather.replace();
  }
})();
</script>
